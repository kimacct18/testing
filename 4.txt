<title-Build a simple user interface>In this lesson, you'll use the Android Studio Layout Editor to create a layout that includes a text box and a button. In the next lesson, you'll make the app respond to the button tap by sending the content of the text box to another activity.  <WS>Figure 1. Screenshot of the final layout <p> The user interface for an Android app is built using a hierarchy of layouts (ViewGroup objects) and widgets (View objects). Layouts are containers that control how their child views are positioned on the screen. Widgets are UI components such as buttons and text boxes.  <WS>Figure 2. Illustration of how ViewGroup objects form branches in the layout and contain View objects <p> Android provides an XML vocabulary for ViewGroup and View classes, so most of your UI is defined in XML files. However, instead of teaching you to write some XML, this lesson shows you how to create a layout using Android Studio's Layout Editor, which makes it easy to build a layout by drag-and-dropping views. <p> This lesson expects that you are using Android Studio 3.0 or higher and you've followed the previous lesson to create your Android project.  <title-Open the Layout Editor> To get started, set up your workspace as follows: 1) In Android Studio's Project window, open app > res > layout > activity_main.xml.  2) To make more room for the Layout Editor, hide the Project window by selecting View > Tool Windows > Project (or click Project icon on the left side of Android Studio). 3) If your editor shows the XML source, click the Design tab at the bottom of the window. 4) Click Select Design Surface icon and select Blueprint.  5) Click Show icon in the Layout Editor toolbar and make sure Show Constraints is checked.  6) Make sure Autoconnect is off. The tooltip in the toolbar should read Turn On Autoconnect (because it's now off).  7) Click Default Margins in the toolbar and select 16 (you can still adjust the margin for each view later).  8) Click Device for Preview in the toolbar and select 5.5, 1440 × 2560, 560dpi (Pixel XL).  <p> Your editor should now look as shown in figure 3. <WS> Figure 3. The Layout Editor showing activity_main.xml <p> For additional information, see the introduction to the Layout Editor.  <p> The Component Tree window on the bottom-left side shows the layout's hierarchy of views. In this case, the root view is a ConstraintLayout, containing just one TextView object. <p> ConstraintLayout is a layout that defines the position for each view based on constraints to sibling views and the parent layout. In this way, you can create both simple and complex layouts with a flat view hierarchy. That is, it avoids the need for nested layouts (a layout inside a layout, as shown in figure 2), which can increase the time required to draw the UI.  <p> For example, you can declare the following layout (in figure 4):  <WS>Figure 4. Illustration of two views positioned inside ConstraintLayout <p>  a)View A appears 16dp from the top of the parent layout. b) View A appears 16dp from the left of the parent layout.  c) View B appears 16dp to the right of view A.  d) View B is aligned to the top of view A. <p> In the following sections, you'll build a layout similar to this. <title-Add a text box> 1) First, you need to remove what's already in the layout. So click TextView in the Component Tree window, and then press Delete. 2) In the Palette, click Text to show the available text controls.  3) Drag Plain Text into the design editor and drop it near the top of the layout. This is an EditText widget that accepts plain text input.  4) Click the view in the design editor. You can now see the resizing handles on each corner (squares), and the constraint anchors on each side (circles). For better control, you might want to zoom in on the editor using the buttons in the Layout Editor toolbar.  5) Click-and-hold the anchor on the top side, and then drag it up until it snaps to the top of the layout and release. That's a constraint—it specifies the view should be 16dp from the top of the layout (because you set the default margins to 16dp).  6) Similarly, create a constraint from the left side of the view to the left side of the layout. <p> The result should look like the screenshot in figure 5. <WS>Figure 5. The text box is constrained to the top and left of the parent layout <title-Add a button> 1)In the Palette, click Buttons.  2) Drag Button into the design editor and drop it near the right side.  3) Create a constraint from the left side of the button to the right side of the text box.  4) To constrain the views in a horizontal alignment, you need to create a constraint between the text baselines. So click the button, and then click Edit Baseline icon, which appears in the design editor directly below the selected view. The baseline anchor appears inside the button. Click-and-hold on this anchor and then drag it to the baseline anchor that appears in the text box. <p> The result should look like the screenshot in figure 6. <WS>Figure 6. The button is constrained to the right side of the text box and its baseline <p> Note: You can also create a horizontal alignment using the top or bottom edges, but the button includes padding around its image, so the visual alignment is wrong if you align these views that way. <title-Change the UI strings> To preview the UI, click Select Design Surface icon in the toolbar and select Design. Notice that the text input is pre-filled with "Name" and the button is labeled "Button." So now you'll change these strings. <p> 1)Open the Project window and then open app > res > values > strings.xml. <p> This is a string resources file where you should specify all your UI strings. Doing so allows you to manage all UI strings in a single location, which makes it easier to find, update, and localize (compared to 